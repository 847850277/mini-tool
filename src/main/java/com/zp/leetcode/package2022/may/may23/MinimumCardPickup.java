package com.zp.leetcode.package2022.may.may23;

import java.util.HashSet;
import java.util.Set;

/**
 * @author zhengpeng
 * @date 2022/5/23 10:21 上午
 * 最小的连续卡牌
 **/
public class MinimumCardPickup {


    /**
     * 两次循环会超时
     * @param cards
     * @return
     */
    public int minimumCardPickup(int[] cards) {
       int minSize = Integer.MAX_VALUE;
       int length = cards.length;
       int leftPoint = 0;
       while (leftPoint < length - 1){
           int left = cards[leftPoint];
           for (int rightPoint = leftPoint + 1; rightPoint < length; rightPoint++) {
                int right = cards[rightPoint];
                if(left == right){
                    int diff = rightPoint - leftPoint  + 1;
                    if(diff < minSize){
                        System.err.println("right:" + rightPoint + ",left:" + leftPoint);
                    }
                    minSize = Math.min(minSize, diff);
                    //leftPoint++;
                    continue;
                }
           }
           leftPoint++;
       }
       return  minSize == Integer.MAX_VALUE ?  -1 : minSize;
    }

    /**
     * 滑动窗口，循环一次
     * @param cards
     * @return
     */
    public int minimumCardPickup2(int[] cards) {
        int length = cards.length;
        int left = 0, right = 0;
        Set<Integer> set = new HashSet<Integer>();
        int minSize = Integer.MAX_VALUE;
        while(right < length){
            final int num = cards[right];
            //窗口滑动
            while (set.contains(num)){
                int diff = right - left + 1;
                minSize = Math.min(minSize,diff);
                //收缩左边边界
                set.remove(cards[left]);
                left ++;
            }
            set.add(num);
            right++;
        }
        return minSize == Integer.MAX_VALUE ?  -1 : minSize;

    }

    public static void main(String[] args) {
        int[] array = new int[]{3,4,4,2,3,4,7,4};
        //int[] array = new int[]{840,999,654,473,941,815,311,191,125,165,581,267,717,644,750,783,871,74,455,259,47,437,599,910,104,158,461,701,593,566,597,534,507,232,393,421,923,233,837,282,631,971,243,971,845,252,986,75,320,227,1000,819,964,329,438,331,335,851,964,707,697,145,722,912,638,813,972,125,315,631,772,971,545,455,776,707,557,452,786,781,148,169,51,160,734,690,756,40,891,182,44,503,280,767,624,816,753,138,284,319,532,70,343,773,38,71,753,368,890,628,114,61,802,837,944,963,404,45,146,720,895,660,349,516,236,776,417,521,580,982,409,735,665,80,823,260,271,216,489,974,817,765,175,685,911,214,892,663,670,828,649,862,740,69,640,506,868,389,850,878,706,990,231,442,920,317,975,513,812,490,152,384,604,180,673,268,782,352,595,969,668,576,937,969,778,453,665,263,142,432,457,488,236,240,552,88,554,267,680,682,131,15,273,491,279,231,990,403,775,757,612,885,218,60,646,628,765,108,117,353,357,637,435,834,348,112,128,876,783,163,834,70,126,452,19,13,776,324,432,357,215,975,476,999,9,674,706,693,693,643,451,493,834,494,234,292,823,169,68,926,88,659,810,241,329,552,972,497,107,374,992,965,852,869,798,914,502,698,444,42,694,571,886,87,990,540,642,995,832,522,434,110,614,33,828,875,21,967,650,289,454,132,675,297,776,447,561,596,462,120,100,367,526,911,912,724,127,429,893,844,780,563,978,455,78,255,377,863,63,280,636,892,488,520,928,698,258,908,845,993,988,247,114,551,188,263,740,999,10,631,505,211,251,590,631,830,583,178,660,814,121,376,713,606,474,606,899,192,110,488,779,643,181,514,92,855,950,916,366,634,433,985,836,649,976,591,833,86,82,111,694,944,874,38,454,294,785,949,648,339,459,768,369,289,55,782,425,962,823,974,528,443,252,397,326,613,731,294,570,797,212,597,201,743,600,915,359,983,21,720,688,223,157,166,485,98,60,312,834,295,879,782,965,67,77,8,627,607,40,184,132,855,814,834,752,834,300,427,801,61,797,338,444,292,601,649,330,718,176,369,610,464,529,235,922,804,756,29,826,49,114,659,776,23,914,611,141,715,406,313,6,888,101,339,673,637,826,80,54,440,550,41,396,131,779,281,163,94,961,685,454,217,81,997,4,143,427,281,890,854,893,592,847,979,334,550,667,104,665,508,320,979,364,20,568,841,512,470,110,967,184,992,17,676,364,929,884,982,871,934,542,909,639,807,213,158,29,632,591,624,898,758,945,965,667,998,141,533,507,153,713,529,568,22,760,828,916,726,599,154,844,360,639,768,494,659,442,764,311,123,754,644,342,353,659,149,865,576,989,67,461,991,812,444,182,828,130,168,467,146,9,269,817,710,451,760,893,914,185,346,597,366,438,520,42,836,449,265,415,656,455,67,290,662,53,74,178,279,468,321,706,568,40,505,217,17,933,408,280,755,948,389,920,642,239,491,815,802,325,707,10,761,849,549,987,687,582,920,309,169,480,498,367,554,620,309,884,59,391,529,238,57,657,259,389,487,755,662,964,464,927,442,786,242,793,718,208,42,875,167,59,396,132,101,554,167,917,264,202,787,982,360,909,464,975,182,25,575,125,735,897,616};
        //int[] array = new int[]{840,999,654,473,941,815,311,191,125,165,581,267,717,644,750,783,871,74,455,259,47,437,599,910,104,158,461,701,593,566,597,534,507,232,393,421,923,233,837,282,631,971,243,971,845,252,986,75,320,227,1000,819,964,329,438,331,335,851,964,707,697,145,722,912,638,813,972,125,315,631,772,971,545,455,776,707,557,452,786,781,148,169,51,160,734,690,756,40,891,182,44,503,280,767,624,816,753,138,284,319,532,70,343,773,38,71,753,368,890,628,114,61,802,837,944,963,404,45,146,720,895,660,349,516,236,776,417,521,580,982,409,735,665,80,823,260,271,216,489,974,817,765,175,685,911,214,892,663,670,828,649,862,740,69,640,506,868,389,850,878,706,990,231,442,920,317,975,513,812,490,152,384,604,180,673,268,782,352,595,969,668,576,937,969,778,453,665,263,142,432,457,488,236,240,552,88,554,267,680,682,131,15,273,491,279,231,990,403,775,757,612,885,218,60,646,628,765,108,117,353,357,637,435,834,348,112,128,876,783,163,834,70,126,452,19,13,776,324,432,357,215,975,476,999,9,674,706,693,693,643,451,493,834,494,234,292,823,169,68,926,88,659,810,241,329,552,972,497,107,374,992,965,852,869,798,914,502,698,444,42,694,571,886,87,990,540,642,995,832,522,434,110,614,33,828,875,21,967,650,289,454,132,675,297,776,447,561,596,462,120,100,367,526,911,912,724,127,429,893,844,780,563,978,455,78,255,377,863,63,280,636,892,488,520,928,698,258,908,845,993,988,247,114,551,188,263,740,999,10,631,505,211,251,590,631,830,583,178,660,814,121,376,713,606,474,606,899,192,110,488,779,643,181,514,92,855,950,916,366,634,433,985,836,649,976,591,833,86,82,111,694,944,874,38,454,294,785,949,648,339,459,768,369,289,55,782,425,962,823,974,528,443,252,397,326,613,731,294,570,797,212,597,201,743,600,915,359,983,21,720,688,223,157,166,485,98,60,312,834,295,879,782,965,67,77,8,627,607,40,184,132,855,814,834,752,834,300,427,801,61,797,338,444,292,601,649,330,718,176,369,610,464,529,235,922,804,756,29,826,49,114,659,776,23,914,611,141,715,406,313,6,888,101,339,673,637,826,80,54,440,550,41,396,131,779,281,163,94,961,685,454,217,81,997,4,143,427,281,890,854,893,592,847,979,334,550,667,104,665,508,320,979,364,20,568,841,512,470,110,967,184,992,17,676,364,929,884,982,871,934,542,909,639,807,213,158,29,632,591,624,898,758,945,965,667,998,141,533,507,153,713,529,568,22,760,828,916,726,599,154,844,360,639,768,494,659,442,764,311,123,754,644,342,353,659,149,865,576,989,67,461,991,812,444,182,828,130,168,467,146,9,269,817,710,451,760,893,914,185,346,597,366,438,520,42,836,449,265,415,656,455,67,290,662,53,74,178,279,468,321,706,568,40,505,217,17,933,408,280,755,948,389,920,642,239,491,815,802,325,707,10,761,849,549,987,687,582,920,309,169,480,498,367,554,620,309,884,59,391,529,238,57,657,259,389,487,755,662,964,464,927,442,786,242,793,718,208,42,875,167,59,396,132,101,554,167,917,264,202,787,982,360,909,464,975,182,25,575,125,735,897,616};
        MinimumCardPickup minimumCardPickup = new MinimumCardPickup();
        System.out.println(minimumCardPickup.minimumCardPickup2(array));
        //System.out.println(minimumCardPickup.test(array));
    }

    /**
     * 两次循环
     * @param array
     * @return
     */
    private boolean test(int[] array) {

        for (int i = 0; i < array.length; i++) {
            for (int j = i + 1; j < array.length; j++) {
                if(array[i] == array[j] && (i + 1) == j){
                    System.out.println("i:" + i + "," + array[i] + ",j:" + j + ","  + array[j]);
                }
            }
        }

        return true;

    }
}
